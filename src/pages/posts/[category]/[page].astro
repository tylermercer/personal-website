---
import type { GetStaticPaths } from "astro";
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../../layouts/Category.astro";
import checkCategory from "../../../utils/checkCategory";
import filterOutDraftsIfProduction from "../../../utils/filterOutDraftsIfProduction";
import getCategory from "../../../utils/getCategory";
import labelDrafts from "../../../utils/labelDrafts";
import sortByDate from "../../../utils/sortByDate";

export type Props = {
    page: {
        data: CollectionEntry<"posts">[];
        url: {
            next: string;
            prev: string;
        };
    };
    category: CollectionEntry<'categories'>;
};

const { page, category } = Astro.props;

export const getStaticPaths = (async ({ paginate }) => {
    const allCategories = await getCollection('categories');

    const allPosts = labelDrafts(sortByDate(filterOutDraftsIfProduction(await getCollection('posts'))));
    // For every tag, return a paginate() result.
    // Make sure that you pass `{params: {tag}}` to `paginate()`
    // so that Astro knows which tag grouping the result is for.
    return allCategories.flatMap((category) => {
        const postsInCategory = allPosts.filter((post) => checkCategory(post, category.id));
        return paginate(postsInCategory, {
        params: { category: category.id },
        props: { category },
        pageSize: 5
        });
    });

    // const posts = await getCollection("posts");
    // return paginate(sortByDate(filterOutDraftsIfProduction(posts)), { pageSize: 5 });
}) satisfies GetStaticPaths;
---

<Layout
    category={category}
    nextPageUrl={page.url.next}
    previousPageUrl={page.url.prev}
    paginatedPosts={page.data}
/>
