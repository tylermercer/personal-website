---
export interface Props {
	class?: string;
}

const { class: className, ...rest } = Astro.props;
---

<div class={`subscribe-form ${className}`} {...rest}>
	<slot name="heading" />
	<slot name="body" />
	<form method="post" action="/api/submit-form">
		<label> Email Address</label>
		<input
			type="email"
			name="email_address"
			placeholder="your.email@example.com"
			aria-label="Email Address"
		/>
		<div role="status">
			<div class="msg msg-error" hidden>
				Something went wrong. Please try again.
			</div>
		</div>
		<div class="controls">
			<button data-element="submit" type="submit">Subscribe</button>
			<details>
				<summary>Preferences</summary>
				<label>
					<input type="checkbox" name="category_faith" value="yes" checked />
					 Faith Posts
				</label>
				<label>
					<input type="checkbox" name="category_software" value="yes" checked />
					 Software Posts
				</label>
				<label>
					<input
						type="checkbox"
						name="category_uncategorized"
						value="yes"
						checked
					/>
					 Uncategorized Posts
				</label>
			</details>
		</div>
	</form>
	<div role="status">
		<div class="msg msg-success" hidden>Success! Thanks for signing up.</div>
	</div>
</div>

<script>
	const validateEmail = (email: string) => {
		return email.match(
			/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
		);
	};

	document.querySelectorAll(".subscribe-form").forEach((container) => {
		const form: HTMLFormElement = container.querySelector("form")!;
		const input: HTMLInputElement = container.querySelector("input[type=email]")!;
		const success: HTMLDivElement = container.querySelector(".msg-success")!;
		const error: HTMLDivElement = container.querySelector(".msg-error")!;

		form.addEventListener("submit", async (e: SubmitEvent) => {
			e.preventDefault();
			error.hidden = true;

			if (!input.value) {
				error.hidden = false;
				error.innerText = "Please enter your email address";
				return;
			}

			if (!validateEmail(input.value)) {
				error.hidden = false;
				error.innerText = "Please enter a valid email address";
				return;
			}

			const formData = new FormData(form);

			const categoryEntries = Array.from(formData.entries()).filter((e) =>
				e[0].startsWith("category_"),
			);

			if (!categoryEntries.some((e) => e[1] === "yes")) {
				error.hidden = false;
				error.innerText = "Must subscribe to at least one category";
				return;
			}

			input.disabled = true;
			var res = await fetch(form.action, {
				method: form.method,
				body: formData,
				headers: {
					"X-From-JS": "true",
				},
			});
			if (res.ok) {
				form.hidden = true;
				success.hidden = false;
			} else {
				const data = await res.json();
				input.disabled = false;
				error.innerText = data.error || "Something went wrong. Please try again.";
				error.hidden = false;
			}
		});
	});
</script>

<style lang="scss">
	.subscribe-form {
		label {
			font-family: var(--font-heading);
			font-weight: bold;
			display: block;
		}
		input[type="email"] {
			font-family: var(--font-body);
			color: #444951;
			background-color: white;
			border: 2px solid var(--color-gray-9-static);
			border-radius: 0;
			display: block;
			margin-bottom: 0.5rem;
			width: 100%;
			padding: 0.8rem;
			font-size: 1rem;
		}
		input::placeholder {
			color: #88898a;
		}
		button {
			font-family: var(--font-accent);
			cursor: pointer;
			border: none;
			color: white;
			background-color: var(--color-primary-bg-static);
			border-radius: 0;
			font-weight: 700;
			margin-bottom: 0.8rem;
			font-size: 1rem;
			padding: 0.7rem;
			text-align: center;
		}
		button:hover,
		button:focus {
			filter: brightness(0.95) contrast(1.1);
		}
		.disclaimer {
			font-size: 0.9em;
			text-align: center;
			line-height: 1.8;
		}
		.msg-error {
			background: #fde8e2;
			border-color: #f2643b;
			color: #ea4110;
		}
		.msg-success {
			background: #d3fbeb;
			color: #0c905c;
			border-color: #10bf7a;
		}
		.msg {
			border: 1px solid white;
			-webkit-box-flex: 1;
			flex: 1 0 auto;
			list-style: none;
			margin: 0.5rem auto;
			padding: 12px;
			width: 100%;
		}
		.controls {
			display: flex;
			align-items: flex-start;
			justify-content: space-between;
			flex-wrap: wrap;
		}
		summary {
			font-family: var(--font-accent);
			font-size: 0.8rem;
			width: 100%;
			cursor: pointer;
		}
		details[open] {
			& > summary {
				font-size: 1rem;
				font-weight: bold;
				&::after {
					content: ":";
				}
			}
			font-size: 0.8rem;
			background-color: var(--color-primary-3);
			padding-right: 0.5rem;
			padding-left: 0.5rem;
			border: 1px solid var(--color-primary-12);
		}
	}
</style>
