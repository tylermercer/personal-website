---
export type Props = {
  url: URL;
  title: string;
};

const { url, title, } = Astro.props;

const urlStr = url.toString();

const linkProviders = ["Facebook", "Twitter", "LinkedIn", "Email"];

const getLink = (platform: string) => {
  switch (platform.toLowerCase()) {
    case "facebook":
      return `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(
        urlStr,
      )}`;
    case "twitter":
      return `https://twitter.com/intent/tweet?url=${encodeURIComponent(
        urlStr,
      )}`;
    case "linkedin":
      return `https://www.linkedin.com/shareArticle?url=${encodeURIComponent(
        urlStr,
      )}`;
    case "email":
      return `mailto:?body=${encodeURIComponent(`${title}\n${urlStr}`)}`;
    default:
      throw new Error(`Invalid platform: ${platform}`);
  }
};

const shareLinks = linkProviders.map((name) => ({ name, link: getLink(name) }));
---
<!--
<section aria-labelledby="share-links-label" class="share-links">
  <label id="share-links-label">Share this article:{" "}</label>
  <ul class="share-links-list">
    {
      shareLinks.map((s, i) => (
        <>
          <li>
            <a href={s.link} target="_blank">
              {s.name}
            </a>
          </li>
          {i !== linkProviders.length - 1 ? <>&nbsp;</> : <> </>}
        </>
      ))
    }
  </ul>
</section>
<style lang="scss">
  .share-links {
    display: inline;
    width: 100%;
    & label {
      display: inline;
      @media (min-width: 635px) {
        text-transform: lowercase;
        &:before {
          content: "or ";
        }
      }
    }
    &-list {
      display: contents;
      list-style-type: none;
      padding: 0;
      & li {
        display: inline;
      }
    }
    @media (min-width: 635px) {
      width: unset;
    }
  }
</style>
-->
