name: Build and Deploy to Cloudflare Pages

on:
  schedule:
    - cron: "0 15 * * *"
  push:
    branches:
      - main
      - switch-to-cf-pages
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout repository
        id: checkout_repo
        uses: actions/checkout@v3

      - name: Determine whether to check for changed non-markdown files
        id: determine_mode
        run: |
          if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.event_name }}" == "pull_request" ]]; then
            echo "mode=always" >> $GITHUB_OUTPUT
          else
            echo "mode=check" >> $GITHUB_OUTPUT
          fi

      - name: Get changed files
        if: steps.determine_mode.outputs.mode == 'check'
        id: changed_files
        uses: tj-actions/changed-files@v35

      - name: Check for non-Markdown files
        if: steps.determine_mode.outputs.mode == 'check'
        id: check_files
        run: |
          non_markdown_files=$(echo "${{ steps.changed_files.outputs.modified_files }}" | grep -v '\.md$' || true)
          echo "non_markdown_files=$non_markdown_files" >> $GITHUB_OUTPUT

      - name: Build site
        id: build_site
        run: |
          if [[ "${{ steps.determine_mode.outputs.mode }}" == "always" || -n "${{ steps.check_files.outputs.non_markdown_files }}" ]]; then
            npm install
            npm run build
            echo "result=built" >> $GITHUB_OUTPUT
          else
            echo "Skipping build step."
            echo "result=skipped" >> $GITHUB_OUTPUT
          fi

      - name: Extract variables
        id: extract_vars
        shell: bash
        run: |
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "datetime=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Deploy to Cloudflare Pages
        id: deploy
        if: steps.build_site.outputs.result == 'built'
        uses: cloudflare/pages-action@v1
        with:
          branch: ${{ steps.extract_vars.outputs.branch }}
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: ./dist

      - name: Add preview URL to pull pequest
        if: github.event_name == 'pull_request' && steps.build_site.outputs.result == 'built'
        uses: thollander/actions-comment-pull-request@v2
        with:
          comment_tag: deploy_preview
          message: |
            ## Deployed to Cloudflare Pages! :rocket:

            Deploy preview: ${{ steps.deploy.outputs.alias }}
            Deployed at: ${{ steps.extract_vars.outputs.datetime }}
            Latest deployed commit: `${{ steps.extract_vars.outputs.sha_short }}`
